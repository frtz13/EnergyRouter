substitutions:
  node_name: solarheat-dimmer
  mqtt_topic: home/solarheat-dimmer

esphome:
  name: ${node_name}
  build_path: ${node_name}/
  on_boot:
    priority: 600
    then:
      - light.turn_off: solarheat_dimmer

esp8266:
  board: d1_mini

logger:
  level: INFO

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_server_password

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password
  discovery: False
  topic_prefix: ${mqtt_topic}
  birth_message:
    topic: ${mqtt_topic}/DimmerLWT
    payload: online
  will_message:
    topic: ${mqtt_topic}/DimmerLWT
    payload: offline
  on_json_message:
    topic: ${mqtt_topic}/power
    then:
      - light.turn_on:
          id: solarheat_dimmer
          brightness: !lambda |-
            float dim = 0;
            if (id(enable_light))
              {
              if (x.containsKey("dim_percent"))
                dim = x["dim_percent"];
              return dim / 100;
              }
            else
            {
              ESP_LOGW("Dimmer", "Dimmer disabled");
              return 0;
            }
      - script.execute: dimmer_watchdog

globals:
   - id: enable_light
     type: bool
     restore_value: no
     initial_value: 'true'
     # we should set this to 'false' so dimmer won't start without ZC
     # in fact, we need to check if it actually does
     # but this does not seem to work

script:
  - id: dimmer_watchdog
    mode: restart
    then:
      - delay: 1 min
      - light.turn_off: solarheat_dimmer
      - logger.log: "dimmer reset to 0 by watchdog"

  - id: zc_watchdog
    mode: restart
    then:
      - globals.set:
          id: enable_light
          value: 'true'
      - delay: 200 ms
      - globals.set:
          id: enable_light
          value: 'false'
      - light.turn_off: solarheat_dimmer
      - logger.log: "dimmer reset to 0 by zc watchdog"

binary_sensor:
    platform: gpio
    pin: GPIO14
    name: zc
    on_press:
      then:
        - script.execute: zc_watchdog

output:
  - platform: ac_dimmer
    id: dimmer1
    gate_pin: GPIO16 #D0
    # method: leading pulse # by default
    zero_cross_pin:
      number: GPIO14 #D5
      mode: INPUT
      inverted: no
    max_power: 70%
    min_power: 10%

light:
  - platform: monochromatic
    output: dimmer1
    name: "Solarheat Dimmer"
    id: solarheat_dimmer
    default_transition_length: 0s

sensor:
  - platform: wifi_signal
    name: "rssi"
    update_interval: 60s
    retain: false

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    retain: false
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m" : "")
              ).c_str();
    
text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    retain: false